<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://km-so-yeon.github.io/</id><title>포스트잇</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2023-12-18T17:32:45+09:00</updated> <author> <name>김소연</name> <uri>https://km-so-yeon.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://km-so-yeon.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://km-so-yeon.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 김소연 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[AWS] AWS SAA 합격 후기</title><link href="https://km-so-yeon.github.io/posts/AWS-SAA/" rel="alternate" type="text/html" title="[AWS] AWS SAA 합격 후기" /><published>2023-11-15T09:00:00+09:00</published> <updated>2023-11-15T09:00:00+09:00</updated> <id>https://km-so-yeon.github.io/posts/AWS-SAA/</id> <content src="https://km-so-yeon.github.io/posts/AWS-SAA/" /> <author> <name>김소연</name> </author> <category term="Review" /> <summary> 응시하게 된 이유 지난 1년간 이직을 준비하면서 여러 면접에 탈락하면서 좌절감이 조금 있었다. 그래서 한 동안 휴식을 하면서 회복을 했지만 어딘가에서 성취감을 얻고 싶었고 최근 많이 사용하는 AWS 클라우드의 자격증을 응시하고자 하였다. 시험 신청 한국어로 선택하고 시험 신청 후 편의 지원 요청을 통해 추가 시간 30분도 받았다. 한국어로 선택하더라도 기존 영어 문제도 볼 수 있기 때문에 한국어를 선택하는 것이 좋다. 온라인 혹은 대면 중에 선택할 수 있는데 온라인이 시험 시간이 밤에도 있고 응시할 수 있는 시간대가 많아서 온라인으로 선택했다. 매년 10월쯤(정확하지 않음)에 AWS 자격증 챌린지가 나오는데, 챌린지에 참여해서 50% 할인 쿠폰을 얻어서 8만원 대에 응시할 수 있었다.... </summary> </entry> <entry><title>[Java] Filter, Interceptor, AOP 비교</title><link href="https://km-so-yeon.github.io/posts/Filter,-Interceptor,-AOP/" rel="alternate" type="text/html" title="[Java] Filter, Interceptor, AOP 비교" /><published>2023-11-07T09:00:00+09:00</published> <updated>2023-11-07T09:00:00+09:00</updated> <id>https://km-so-yeon.github.io/posts/Filter,-Interceptor,-AOP/</id> <content src="https://km-so-yeon.github.io/posts/Filter,-Interceptor,-AOP/" /> <author> <name>김소연</name> </author> <category term="Language" /> <category term="Java" /> <summary> 자바 웹 개발을 할 때 공통 처리를 위해 Filter, Interceptor, AOP를 활용할 수 있다. Filter, Interceptor, AOP 흐름 실행 순서 Filter → Interceptor → AOP → Interceptor → Filter 비교 Filter, Interceptor는 Servlet 단위에서 실행되고, AOP는 메소드 앞에서 Proxy 형태로 실행된다. Filter는 스프링 컨텍스트 외부에 존재하고 Interceptor, AOP는 스프링 컨텍스트 내부에 존재한다. 개념 Filter Servlet 3.x 부터 추가된 기술이다. Client와 Servlet 사이에서 전달되는 request와 response를 중간에서 가로채서 특정한 작업을... </summary> </entry> <entry><title>[Web] JWT</title><link href="https://km-so-yeon.github.io/posts/Web-Jwt/" rel="alternate" type="text/html" title="[Web] JWT" /><published>2023-10-23T05:00:00+09:00</published> <updated>2023-11-06T22:28:14+09:00</updated> <id>https://km-so-yeon.github.io/posts/Web-Jwt/</id> <content src="https://km-so-yeon.github.io/posts/Web-Jwt/" /> <author> <name>김소연</name> </author> <category term="Web" /> <summary> 배경 HTTP 프로토콜 통신은 모든 응답이 완료되면 끊어진 상태과 되는 비연결성과, 클라이언트 측의 상태를 보관하지 않는 무상태성(Stateless)의 특징을 가진다. 그러나 클라이언트의 정보가 계속해서 쓰여야하는 경우가 있다. 예를 들어 로그인을 진행한 후 다른 서비스를 진행할 때, 로그인 정보가 어딘가에 담겨있지 않다면 매번 로그인을 해야 한다. 그래서 기존에는 쿠키와 세션을 가지고 아래와 같은 과정을 통해 사용자를 확인하였다. 쿠키와 세션을 이용한 사용자 인증 동작 순서 클라이언트가 ID, PW로 서버에 로그인 요청을 한다. 서버에서는 ID, PW로 인증하고, 사용자를 식별할 세션 ID를 만들어서 서버의 세션 저장소에 저장한다. ... </summary> </entry> <entry><title>[Java] 자바 버전 별 정리</title><link href="https://km-so-yeon.github.io/posts/Java-Version/" rel="alternate" type="text/html" title="[Java] 자바 버전 별 정리 " /><published>2023-10-10T09:00:00+09:00</published> <updated>2023-10-10T09:00:00+09:00</updated> <id>https://km-so-yeon.github.io/posts/Java-Version/</id> <content src="https://km-so-yeon.github.io/posts/Java-Version/" /> <author> <name>김소연</name> </author> <category term="Language" /> <category term="Java" /> <summary> 자바 5 버전 이전까지는 1.0 … 1.4 로 표기했다. J2SE 5 (2004년 9월) Generics ✨ Java의 가장 큰 변화 중 첫번째 타입을 클래스 내부에서 지정하는 것이 아닌 외부에서 사용자에 의해 지정할 수 있게 되었다. 컴파일 시에 타입 체크를 해주기 때문에 타입 안정성이 높아지고 형변환의 번거로움이 줄어들게 되었다. Annotation 프로그램의 소스코드 안에 다른 프로그램을 위한 정보를 포함시킨 것 주석처럼 프로그래밍 언어에 영향을 미치지 않으면서 다른 프로그램에게 유용한 정보를 제공한다. @Test는 테스트 프로그램에서 테스트할 메서드라는 것을 알리는 역할이고, 그 외에 프로그램 자체에 아무런 영향을 미치지 않는다. ... </summary> </entry> <entry><title>[Web] Spring API 공통 응답 포맷 만들기</title><link href="https://km-so-yeon.github.io/posts/Web-Spring-API-Common-Response/" rel="alternate" type="text/html" title="[Web] Spring API 공통 응답 포맷 만들기" /><published>2023-10-06T09:00:00+09:00</published> <updated>2023-10-06T09:00:00+09:00</updated> <id>https://km-so-yeon.github.io/posts/Web-Spring-API-Common-Response/</id> <content src="https://km-so-yeon.github.io/posts/Web-Spring-API-Common-Response/" /> <author> <name>김소연</name> </author> <category term="Web" /> <summary> 클라이언트가 API를 호출하고 응답을 받았을 때 원하는 결과 뿐만 아니라 실패했을 때 코드, 메시지 등의 응답에 대한 메타데이터를 같이 보내고 싶었고 메타데이터를 객체로 생성하여 공통적인 포맷을 만들어서 전달하고 싶었다. 필요한 객체 그러기 위해서 아래와 같은 클래스들을 생성해주어야 한다. Return 할 Response 객체 공통 포맷을 가지기 위해 필요하다. 모든 API에서 이 객체 형식으로 Return한다. (공통 포맷) 상태를 나타내는 Status 객체 응답의 성공 여부, 코드, 메시지를 저장한다. 응답에 실패했을 때 발생시킬 Exception 객체 Exception을 발생시킬 ... </summary> </entry> </feed>
