[ { "title": "[AWS] AWS SAA 합격 후기", "url": "/posts/AWS-SAA/", "categories": "Review", "tags": "AWS", "date": "2023-11-15 09:00:00 +0900", "snippet": "응시하게 된 이유지난 1년간 이직을 준비하면서 여러 면접에 탈락하면서 좌절감이 조금 있었다. 그래서 한 동안 휴식을 하면서 회복을 했지만 어딘가에서 성취감을 얻고 싶었고 최근 많이 사용하는 AWS 클라우드의 자격증을 응시하고자 하였다.시험 신청 한국어로 선택하고 시험 신청 후 편의 지원 요청을 통해 추가 시간 30분도 받았다. 한국어로 선택하더라도 기존 영어 문제도 볼 수 있기 때문에 한국어를 선택하는 것이 좋다. 온라인 혹은 대면 중에 선택할 수 있는데 온라인이 시험 시간이 밤에도 있고 응시할 수 있는 시간대가 많아서 온..." }, { "title": "[Java] Filter, Interceptor, AOP 비교", "url": "/posts/Filter,-Interceptor,-AOP/", "categories": "Language, Java", "tags": "Java", "date": "2023-11-07 09:00:00 +0900", "snippet": "자바 웹 개발을 할 때 공통 처리를 위해 Filter, Interceptor, AOP를 활용할 수 있다.Filter, Interceptor, AOP 흐름실행 순서Filter → Interceptor → AOP → Interceptor → Filter비교 Filter, Interceptor는 Servlet 단위에서 실행되고, AOP는 메소드 앞에서 Proxy 형태로 실행된다. Filter는 스프링 컨텍스트 외부에 존재하고 Interceptor, AOP는 스프링 컨텍스트 내부에 존재한다.개념Filter Servlet 3.x..." }, { "title": "[Web] JWT", "url": "/posts/Web-Jwt/", "categories": "Web", "tags": "Web", "date": "2023-10-23 05:00:00 +0900", "snippet": "배경HTTP 프로토콜 통신은 모든 응답이 완료되면 끊어진 상태과 되는 비연결성과, 클라이언트 측의 상태를 보관하지 않는 무상태성(Stateless)의 특징을 가진다.그러나 클라이언트의 정보가 계속해서 쓰여야하는 경우가 있다.예를 들어 로그인을 진행한 후 다른 서비스를 진행할 때, 로그인 정보가 어딘가에 담겨있지 않다면 매번 로그인을 해야 한다.그래서 기존에는 쿠키와 세션을 가지고 아래와 같은 과정을 통해 사용자를 확인하였다.쿠키와 세션을 이용한 사용자 인증 동작 순서 클라이언트가 ID, PW로 서버에 로그인..." }, { "title": "[Java] 자바 버전 별 정리 ", "url": "/posts/Java-Version/", "categories": "Language, Java", "tags": "Java", "date": "2023-10-10 09:00:00 +0900", "snippet": "자바 5 버전 이전까지는 1.0 … 1.4 로 표기했다.J2SE 5 (2004년 9월)Generics ✨ Java의 가장 큰 변화 중 첫번째 타입을 클래스 내부에서 지정하는 것이 아닌 외부에서 사용자에 의해 지정할 수 있게 되었다. 컴파일 시에 타입 체크를 해주기 때문에 타입 안정성이 높아지고 형변환의 번거로움이 줄어들게 되었다.Annotation 프로그램의 소스코드 안에 다른 프로그램을 위한 정보를 포함시킨 것 주석처럼 프로그래밍 언어에 영향을 미치지 않으면서 다른 프로그램에게 유용한 정보를 제공한다. ..." }, { "title": "[Web] Spring API 공통 응답 포맷 만들기", "url": "/posts/Web-Spring-API-Common-Response/", "categories": "Web", "tags": "Web", "date": "2023-10-06 09:00:00 +0900", "snippet": "클라이언트가 API를 호출하고 응답을 받았을 때원하는 결과 뿐만 아니라 실패했을 때 코드, 메시지 등의 응답에 대한 메타데이터를 같이 보내고 싶었고메타데이터를 객체로 생성하여 공통적인 포맷을 만들어서 전달하고 싶었다.필요한 객체그러기 위해서 아래와 같은 클래스들을 생성해주어야 한다. Return 할 Response 객체 공통 포맷을 가지기 위해 필요하다. 모든 API에서 이 객체 형식으로 Return한다. (공통 포맷) 상태를 나타내는 Status 객체 응답의 성공 여부,..." }, { "title": "[CS] 디자인패턴 - 행동패턴", "url": "/posts/CS-Design-Pattern-Behavioral/", "categories": "CS", "tags": "CS", "date": "2023-08-28 09:00:00 +0900", "snippet": "행동패턴클라스나 객체들이 서로 상호작용하는 방법이나 책임 분배 방법을 정의하는 패턴이다.책임 연쇄(Chain of Responsibility)요청을 처리할 수 있는 객체가 둘 이상 존재하여 한 객체가 처리하지 못하면 다음 객체로 넘어가는 형태의 패턴이다. 클라이언트 요청에 대한 처리를 여러 개의 객체를 나누고, 이들을 사슬(Chain)처럼 연결해 집합 안에서 연쇄적으로 처리한다.처리 객체들을 핸들러(Handler)라고 하는데, 요청을 받으면 각 핸들러는 요청을 처리할 수 있는지 판단하고, 처리할 수 없으면 다음 핸들러로 처리에..." }, { "title": "[CS] 디자인패턴 - 구조패턴", "url": "/posts/CS-Design-Pattern-Structural/", "categories": "CS", "tags": "CS", "date": "2023-08-24 09:00:00 +0900", "snippet": "구조패턴클래스나 객체를 조합해 더 큰 구조를 만드는 패턴이다.예를 들면 서로 다른 인터페이스를 지닌 2개의 객체를 묶어서 단일 인터페이스로 제공하거나, 서로 다른 객체들을 묶어 새로운 기능을 제공하는 패턴이 있다.어댑터(Adapter)호환되지 않는 인터페이스들을 연결하는 디자인 패턴이다.호출당하는 쪽의 메서드를 호출하는 쪽의 코드에 대응하도록 중간에 변환기를 통해 호출한다.사용 호환되지 않는 인터페이스를 가진 클래스들이 함께 작동해야 하는 경우 이미 존재하는 클래스의 인터페이스가 요구 사항과 맞지 않거나 또는 기존 클래스에..." }, { "title": "[CS] 디자인패턴 - 생성패턴", "url": "/posts/CS-Design-Pattern-Creational/", "categories": "CS", "tags": "CS", "date": "2023-08-22 09:00:00 +0900", "snippet": "디자인패턴 (Design Pattern)디자인패턴이란 소프트웨어 개발 과정에서 발견된 설계의 노하우를 축적하여 그 방법에 이름을 붙여서 이후에 재사용하기 좋은 형태로 특정 규약을 만들어서 정리한 것이다.즉, 효율적인 코드를 만들기 위한 방법론이라고 생각하면 된다.디자인패턴에는 생성패턴, 구조패턴, 행동패턴으로 분류된다. 생성패턴 구조패턴 행위패턴 - 싱글톤(Singleton) - 팩토리 메소드(Factory Methods)- 추상 팩토리(Abstract Fac..." }, { "title": "[Spring] ApplicationContext의 구현체", "url": "/posts/Spring-ApplicationContext/", "categories": "Spring", "tags": "Spring", "date": "2023-08-21 09:00:00 +0900", "snippet": "ApplicationContext의 구현체인 MessageSource, ApplicationEventPublisher, ResourceLoader에 대해서 알아보도록 하겠습니다.MessageSource메시지를 다국화할 수 있도록 하는 인터페이스이다. (국제화(i18n) 기능을 제공)ApplicationContext가 구현하고 있는 기능 중 하나이다. ApplicationContext extends MessageSource ApplicationContext를 주입받을 수 있으면 MessageSource를 주입받을 수 있음.스..." }, { "title": "[Spring] 컴포넌트 스캔, 빈의 스코프", "url": "/posts/Spring-Component/", "categories": "Spring", "tags": "Spring", "date": "2023-08-20 09:00:00 +0900", "snippet": "@Component(컴포넌트) 스캔Spring 3.1부터 도입되었습니다.@ComponentScan을 붙이고있는 클래스부터 컴포넌트 스캔을 시작합니다. 스프링 부트에서 사용하는 @SpringAppplication이 이 @ComponentScan 인터페이스를 구현하고 있어서 @SpringApplication을 가지고 있는 클래스부터 컴포넌트 스캔을 시작합니다. 어노테이션으로 스캔 범위를 지정할 수 있습니다. 해당 클래스가 있는 패키지까지 스캔해서 빈으로 생성합니다. (다른 패키지는 스캔을 안함 👉 의존성주입이 안됨)@Filte..." }, { "title": "[Java] 메소드 레퍼런스(Method Reference, 메소드 참조)", "url": "/posts/Java-Method-Reference/", "categories": "Language, Java", "tags": "Java", "date": "2023-08-14 09:00:00 +0900", "snippet": "메소드 레퍼런스란?Java 8에서 추가된 것으로,메소드 레퍼런스란 람다(Lambda) 표현식을 더 간단하게 표현하는 방법입니다.람다 표현식이 단 하나의 메소드만을 호출하는 경우 해당 람다 표현식에서 불필요한 매개변수를 제거하고 사용할 수 있도록 해줍니다.이러한 람다 표현식과 메소드 레퍼런스를 함수형 인터페이스로 받아서 메소드를 실행할 수 있도록 합니다.Consumer&amp;lt;String&amp;gt; func = text -&amp;gt; System.out.println(text);func.accept(&quot;Hel..." }, { "title": "[CS] Design pattern 디자인패턴2", "url": "/posts/CS-DesignPattern2/", "categories": "CS", "tags": "CS", "date": "2023-08-09 09:00:00 +0900", "snippet": "지난 글에 이어서 다른 디자인 패턴들을 알아보겠습니다.템플릿 메서드 패턴(Template Method Pattern)상위클래스의 템플릿 메서드에서 하위 클래스에서 오버라이딩한 메서드를 호출하는 패턴구현 방법 상위 클래스에서 공통 로직을 수행하는 템플릿 메서드 하위 클래스에 오버라이딩을 강제하는 추상 메서드 또는 선택적으로 오버라이딩할 수 있는 훅(Hook) 메서드를 두는 패턴public abstract class Animal { // 템플릿 메서드 public void playWithOwner() { pla..." }, { "title": "[CS] Design pattern 디자인패턴", "url": "/posts/CS-DesignPattern/", "categories": "CS", "tags": "CS", "date": "2023-08-08 09:00:00 +0900", "snippet": "Design pattern 디자인패턴실제 개발 환경에서 비즈니스 요구사항을 프로그래밍으로 처리하면서 만들어진 다양한 해결책 중 많은 사람들이 인정한 베스트 프랙티스를 정리한 것이다. 객체지향 특성과 설계원칙을 기반으로 구현되어 있다. 스프링은 OOP 프레임워크이다. 그렇기 때문에 스프링을 공부하다보면 디자인 패턴을 만날 수 있다.어댑터 패턴(Adapter Pattern)호출당하는 쪽의 메서드를 호출하는 쪽의 코드에 대응하도록 중간에 변환기를 통해 호출하는 패턴이다. 어댑터 : 변환기라는 뜻 서로 다른 두 인터..." }, { "title": "[Java] SOLID", "url": "/posts/Language-SOLID/", "categories": "Language, Java", "tags": "Java", "date": "2023-08-07 09:00:00 +0900", "snippet": "객체지향 설계(Object Oriented Design, OOD)의 5원칙인 SOLID에 대해서 알아보겠습니다.SOLIDSOLID는 로버트 C.마틴이 2000년대 초반 객체 지향 프로그래밍 및 설계의 다섯가지 기본원칙으로 제시한 것을 마이클 페더스(Michael Feathers)가 두문자어로 소개한 것이다. SRP(Single Responsibility Principle) : 단일 책임 원칙 OCP(Open Closed Principle) : 개방 폐쇄 원칙 LSP(Liskov Substitution Principle) ..." }, { "title": "[Spring] @Transactional - Propagation, Isolation", "url": "/posts/DB-Propagation-Isolation/", "categories": "Spring", "tags": "Spring", "date": "2023-08-06 09:00:00 +0900", "snippet": "스프링 어노테이션인 @Transactional의 Propagation과 Isolation에 대해 알아보겠습니다.Transaction 트랜잭션이란?트랜잭션은 데이터베이스의 상태를 변환시키는 하나의 논리적 기능을 수행하기 위한 작업의 단위 또는 한꺼번에 모두 수행되어야 할 일련의 연산들을 의미한다. 트랜잭션은 데이터베이스의 상태를 변경시키는 작업의 단위이다. 하나의 트랜잭션은 Commit되거나 Rollback된다.스프링에서는 Transaction 처리를 지원하는데, 프로그래밍적 트랜잭션과 선언적 트랜잭션을 지원한다. ..." }, { "title": "[DB] CAP 이론", "url": "/posts/DB-CAP/", "categories": "DB", "tags": "DB", "date": "2023-08-04 09:00:00 +0900", "snippet": "CAP 이론이란?CAP 정리에 의하면 데이터베이스 시스템은 일관성(Consistency), 가용성(Availablity), 분단 허용성(Partition torlerance) 세 가지 속성중에서, 두 가지만 가질 수 있고 3가지 모두를 충족할 수는 없다는 이론이다.Consistency, Availablity를 합치면, CA 또는 Consistency와 Partition tolerance를 조합하면 AP가 된다.CAP에 대해 설명하기 앞서 용어에 대해 정리하자면,분산 데이터베이스는 데이터를 여러 대의 노드에 저장한다. 노드란 데..." }, { "title": "[OS] Race condition 경쟁상태", "url": "/posts/OS-Race-condition/", "categories": "OS", "tags": "OS", "date": "2023-08-02 09:00:00 +0900", "snippet": "Race condition 경쟁상태란?Race condition이란 공유 자원에 대해 여러 개의 프로세스가 동시에 읽거나 쓰는 동작을 할 때, 공유 자원에 대한 접근이 어떤 순서로 이루어졌는지에 따라 결과값이 달라지는 상황을 말한다.즉, Race Condition(경쟁상태)란 단어 그대로 두 개 이상의 스레드가 하나의 자원을 놓고 서로 사용하려고 경쟁하는 상황을 말한다.Critical Section(임계 영역)운영체제에서 여러 프로세스가 데이터를 공유하면서 수행될 때 각 프로세스에서 공유 자원에 접근하는 프로그램 코드 부분 을..." }, { "title": "[Web] HTTPS", "url": "/posts/Web-HTTPS/", "categories": "Web Application", "tags": "Web", "date": "2023-07-28 09:00:00 +0900", "snippet": "HTTPS(Hypertext Transfer Protocol Secure)란?HTTPS는 웹 브라우저와 웹 사이트 간에 데이터를 전송하는 데 사용되는 TCP 프로토콜의 일종인 HTTP에 S(Secure)기능을 더한 것입니다.HTTPS 동작방식HTTPS의 동작방식을 알아보기 전에 웹 동작방식을 간단하게 살펴보겠습니다.웹 동작방식은 아래와 같습니다. 웹 브라우저에 URL을 입력하고 Enter 키를 누릅니다. 웹 브라우저가 도메인의 IP주소를 조회합니다.(먼저 캐시를 찾고, 그 다음 DNS를 검색합니다.) 웹 브..." }, { "title": "[Web] Servlet, JSP 그리고 Spring", "url": "/posts/Web-Servlet/", "categories": "Web Application", "tags": "Web, Java", "date": "2023-07-27 09:00:00 +0900", "snippet": "Servlet 이란?Servlet(서블릿)이란 자바를 사용해서 웹 페이지를 동적으로 생성하는 서버 측 프로그램이다.Servlet 기반 웹 페이지 동작방식 사용자(클라이언트)가 URL을 입력하면 웹 어플리케이션 서버(Web Application Server, WAS)가 HTTP Request를 Servlet 컨테이너로 전송한다. 요청을 받은 Servlet Container는 HttpServletRequest, HttpServletResponse 객체를 생성한다. web.xml 을 기반으로 사용자가 요청한 URL이 어느 서블..." }, { "title": "[Java] Reflection", "url": "/posts/Language-Reflection/", "categories": "Language, Java", "tags": "Java", "date": "2023-07-22 09:00:00 +0900", "snippet": "Reflection이란?Reflection이란 힙 영역에 로드된 Class 타입의 객체를 통해, 원하는 클래스의 인스턴스를 생성할 수 있도록 지원하고, 인스턴스의 필드와 메소드를 접근 제어자와 상관 없이 사용할 수 있도록 지원하는 자바 API다.여기서 말하는 로드된 Class는 JVM의 클래스 로더에서 클래스 파일에 대한 로딩을 완료한 후 해당 클래스의 정보를 담은 Class 타입의 객체를 생성하여 메모리의 힙 영역에 저장해 둔 것을 의미한다.(new 키워드를 통해 만든 객체와 다르다.)컴파일 시간이 아닌 실행 시간에 동적으로..." }, { "title": "[Web] 쿠키와 세션", "url": "/posts/Web-Cookie-Session/", "categories": "Web Application", "tags": "Cookie, Session", "date": "2023-07-21 09:00:00 +0900", "snippet": "HTTP는 Connectionless, Stateless 하다는 특징이 있습니다. Connectionless는 클라이언트가 요청을 한 후 응답을 받으면 연결을 끊어버린다. Stateless는 클라이언트의 상태 정보를 가지지 않는다. 클라이언트와 첫 번째 통신에서 데이터를 주고받았다 해도, 다음에 이전 데이터를 유지하지 않는다.우리가 페이지를 이동하더라도 로그인 상태를 유지하거나, 장바구니에 넣은 목록을 유지하는 등 데이터를 유지할 필요가 있습니다. 이 때 HTTP의 Connectionless, Stateless한 점을 보완..." }, { "title": "[Java] 람다(Lambda) 표현식과 스트림(Stream)", "url": "/posts/Language-Lambda-Stream/", "categories": "Language, Java", "tags": "Java", "date": "2023-07-14 09:00:00 +0900", "snippet": "Java 8부터 추가된 람다와 스트림에 대해서 알아보겠습니다.람다 표현식(Lambda expression) 익명 함수 모든 메서드는 객체를 생성해야만 메서드를 호출할 수 있는데 이 람다식을 사용해서 메서드의 역할을 할 수 있다. 람다식으로 인해 메서드를 변수처럼 다룰 수 있게 되었다. 매개변수로 전달되어지는 것이 가능하고, 메서드의 결과로 반환될 수도 있다. 일시적으로 한번만 사용되고 버려지는 익명클래스(익명객체)를 간단하게 표현할 수 있다. 메소드가 하나..." }, { "title": "[Java] 싱글톤 패턴(Sigleton Pattern)", "url": "/posts/Java-Sigleton-Pattern/", "categories": "Language, Java", "tags": "Java", "date": "2023-07-12 09:00:00 +0900", "snippet": "싱글톤 패턴(Singleton Pattern)이란?객체의 인스턴스가 오직 1개만 생성되는 패턴입니다. 싱글톤 패턴은 생성 패턴(Creational Pattern) 중 하나입니다. 생성 패턴은 인스턴스를 만드는 절차를 추상화하는 패턴입니다. 객체를 생성, 합성하는 방법이나 객체의 표현 방법을 시스템과 분리해줍니다. 개발을 할 때 단 하나의 인스턴스만을 갖도록 하는 것이 좋은 경우에 사용합니다. 예를 들어 로그를 찍는 객체, 쓰레드 풀, 윈도우 관리자 등 여러 객체를 관리하는 역할의 객체는 프로그램 내에서 단 하나의 인스턴스를..." }, { "title": "[Web] 일급 함수(First-class function)", "url": "/posts/Web-First-Class-Function/", "categories": "Web Application", "tags": "Javascript", "date": "2023-07-11 09:00:00 +0900", "snippet": "일급 함수란?일급 함수(First-class function)는 함수를 일급 시민(First-class citizens)으로 취급한다는 것입니다.프로그래밍 언어에서 일급 함수를 가질 때, 함수들이 변수처럼 다루어질 수 있습니다.(일급 객체는 객체를 변수처럼 다룰 수 있습니다.)이 때 일급 시민의 조건은 아래와 같습니다. 변수에 값으로 할당될 수 있다. 다른 함수의 전달인자로 전달될 수 있다. 다른 함수에 의해 반환될 수 있습니다. 위의 내용을 Javascript 코드를 통해 알아보겠습니다.예제변수에 함수 ..." }, { "title": "[Java] TCP/IP 프로토콜과 전송계층 프로토콜 비교(TCP, UDP)", "url": "/posts/Language-TCPIP/", "categories": "Language, Java", "tags": "Java", "date": "2023-07-09 09:00:00 +0900", "snippet": "TCP/IP 프로토콜은 Ethernet, IP, TCP, HTTP 등의 개념을 포함하고 있습니다.통신모델최초의 개념으로 OSI 모델부터 시작하였습니다.OSI 모델데이터를 처음으로 전송하는 호스트는 응용 계층부터 물리 계층까지 데이터를 캡슐화합니다. 그리고 물리 계층에서는 통신 회선을 통해 이웃하는 네트워크 장치에게 전달합니다.데이터를 전송하기 위한 경로를 설정하고 판단하는 라우터에서는 목적지가 지역망의 호스트인지 확인합니다. 만약 지역 망의 호스트라면 지역 호스트에게 전달하고, 그렇지 않다면 라우터에게 전달합니다.목적 호스트는..." }, { "title": "[Java] HashMap은 어떻게 동작할까?", "url": "/posts/Language-Mechanism-of-HashMap/", "categories": "Language, Java", "tags": "Java", "date": "2023-07-06 08:00:00 +0900", "snippet": "HashMap에 객체가 들어갔을 때 서로 다른 키로 저장되고, get()을 통해 값을 가져오는 내부적인 과정을 알아보려고 한다.이 글은 Java 7, Java 8 기준이다.Java에서는 Map 인터페이스를 구현한 클래스로 HashMap과 HashTable이 있고 제공하는 기능이 같다.HashMap과 HashTable을 정의한다면 ‘키에 대한 해시 값을 사용하여 값을 저장하고 조회하며, 키-값 쌍의 개수에 따라 동적으로 크기가 증가하는 associate array’라고 할 수 있다. (associate array == Map, ..." }, { "title": "[Java] Thread-Safe", "url": "/posts/Language-Thread-Safe/", "categories": "Language, Java", "tags": "Java", "date": "2023-07-05 08:00:00 +0900", "snippet": "스레드는 프로세스의 하위 개념으로써 프로세스에 할당된 자원을 공유한다. 프로그램을 스레드로 분리하여 실행하면 프로세스 내의 자원을 공유하기 때문에 프로세스에 비해 자원 할당 비용이 적게들고 Context switch 비용도 적게 든다.하지만 자원을 공유하기 때문에 동기화 문제가 발생할 수 있다.Thread-safe 란? 멀티 스레드 프로그래밍에서 일반적으로 어떤 함수나 변수 혹은 객체가 여러 스레드로부터 동시에 접근이 이루어져도 프로그램의 실행에 문제가 없음을 뜻한다. 보다 엄밀하게는 하나의 함수가 한 스레드로부터 호출되어 ..." }, { "title": "[Java] 제네릭 타입 소거", "url": "/posts/Language-Generics-Type-Erasure/", "categories": "Language, Java", "tags": "Java", "date": "2023-07-04 08:00:00 +0900", "snippet": "Generic(제네릭)이란클래스나 메소드에서 사용할 내부 데이터 타입을 컴파일 시 미리 지정하는 방법입니다. 자세한설명그래서 컴파일 타임에 타입 체크를 하기 때문에 런타임에서 ClassCastException과 같은 UncheckedException을 보장 받을 수 있다는 장점이 있습니다.만약 제네릭 클래스를 로타입(Raw Type)으로 타입 파라미터를 지정하지 않고 사용한다면 컴파일 타임에서 타입 체크를 하지 않기 때문에 런타임에서 에러가 발생할 수 있습니다.제네릭의 컴파일 방법이러한 제네릭은 JDK 5부터 도입되었습니다. ..." }, { "title": "[Java] 네트워크 프로그래밍", "url": "/posts/Language-Network/", "categories": "Language, Java", "tags": "Java", "date": "2023-07-02 08:00:00 +0900", "snippet": "자바로 TCP 통신을 할 경우 자바에서 제공하는 API를 사용하면 된다.Socket 클래스자바에서 TCP 통신을 수행할 때 사용하는 클래스이다. 데이터를 보내는 쪽(보통 클라이언트)에서 객체를 생성하여 사용한다. 데이터를 받는 쪽(보통 서버)에서 클라이언트 요청을 받으면, 요청에 대한 Socket 객체를 생성하여 처리한다.👉 원격에 있는 장비와의 연결 상태를 보관하고 있다.ServerSocket서버에서 데이터를 받을 때 사용하는 클래스이다.ServerSocket 클래스에서 제공하는 메소드에서 클라이언트 요청이 생기면 Soc..." }, { "title": "[Java] NIO", "url": "/posts/Language-NIO/", "categories": "Language, Java", "tags": "Java", "date": "2023-07-01 08:00:00 +0900", "snippet": "NIO (New IO)JDK 1.4부터 속도 때문에 생겼다.지금까지 사용한 스트림Stream을 사용하지 않고, 채널Channel과 버퍼Buffer를 사용한다.입력받거나 출력해야 할 데이터를 항상 Buffer에 저장한다. 이를 채널이 관장하는 방식으로 진행된다.파일 쓰기public void writeFile(String fileName, String data) throws Exception { FileChannel channel = new FileOutputStream(fileName).getChannel(); byt..." }, { "title": "[Java] Serializable", "url": "/posts/Language-Serializable/", "categories": "Language, Java", "tags": "Java", "date": "2023-06-30 08:00:00 +0900", "snippet": "Serializable생성한 객체를 파일로 저장하거나, 파일로 저장한 객체를 읽거나객체를 다른 서버로 보내거나, 다른 서버에서 생성한 객체를 받을 때이 인터페이스를 구현해야 한다.public class SerialDto implements Serializable { static final long serialVersionUID = 1L; ...}serialVersionUID 값을 지정해주는 것을 권장한다. 별도로 지정하지 않으면 컴파일 될 때 자동으로 생성된다. 반드시 static final ..." }, { "title": "[Java] JDK에 따른 ArrayList 비교", "url": "/posts/Language-ArrayList-Compare/", "categories": "Language, Java", "tags": "Java", "date": "2023-06-29 08:00:00 +0900", "snippet": "ArrayList 클래스에 주요 메소드로는 생성자, get, add, remove등이 있습니다.그 중에서도 add 메소드의 변화가 성능에 미치는 영향이 가장 크다고 느꼈기 때문에 add메소드를 비교해보겠습니다.JDK 6add메소드 /** * Appends the specified element to the end of this list. * * @param e element to be appended to this list * @return &amp;lt;tt&amp;gt;true&amp;lt..." }, { "title": "[Java] File", "url": "/posts/Language-File/", "categories": "Language, Java", "tags": "Java", "date": "2023-06-26 08:00:00 +0900", "snippet": "I/O (Input Output)프로그램에 있는 내용을 파일에 읽거나 저장할 일이 있을 때, 다른 서버나 디바이스로 보낼 일이 있을 때 사용한다.Java의 I/O 처리 초기 단계 : java.io 패키지에 있는 클래스만 제공 여러 종류의 Stream 클래스 제공 읽는 작업은 InputStream, 쓰는 작업은 OutputStream을 통해서 작업 Reader, Writer 클래스를 통해 char 기반의 문자열로만 되어 있는 파일 처리 ..." }, { "title": "[Java] Garbage Collection", "url": "/posts/Language-Garbage-Collection/", "categories": "Language, Java", "tags": "Java", "date": "2023-06-25 08:00:00 +0900", "snippet": "Garbage Collection프로그램이 동적으로 할당했던 메모리 영역 중에서 필요없게 된 영역(Garbage)을 자동으로 해제하는 기능이다. 더 이상 필요없게된 영역이란, 어떤 변수로 가리키지 않게 된 영역을 의미한다. C, C++ 등의 프로그래밍 언어는 수동으로 메모리 관리를 해주어야 한다. 하지만 Java는 JVM의 Garbage Collector에서 불필요한 메모리를 알아서 정리해준다. Java에서 명시적으로 불필요한 메모리를 표현하기 위해 null로 선언해준다.weak generational hypo..." }, { "title": "[Java] Thread 스레드", "url": "/posts/Language-Thread/", "categories": "Language, Java", "tags": "Java", "date": "2023-06-23 08:00:00 +0900", "snippet": "Thread 스레드java 명령어를 사용해서 클래스를 실행시키는 순간 자바 프로세스가 시작되고, main 메소드가 수행되면서 하나의 쓰레드가 시작된다.많은 쓰레드가 필요하다면, main 메소드에서 쓰레드를 생성해주면 된다. (하나의 프로세스 내에 여러 쓰레드가 수행된다.) 웹에서는 WAS를 사용하고, 똑같이 main 메소드에서 생성한 쓰레드들이 수행되는 것이다. 아무런 쓰레드를 생성하지 않아도 JVM을 관리하기 위한 여러 쓰레드가 존재한다.프로세스와 스레드 차이 프로세스 스레드 ..." }, { "title": "[Java] Immutable Object", "url": "/posts/Language-Immutable-Object/", "categories": "Language, Java", "tags": "Java", "date": "2023-06-22 08:00:00 +0900", "snippet": "Immutable Object란객체가 생성된 이후 객체 내의 데이터들이 변할 수 없는 객체를 의미합니다. 재할당은 가능하지만, 한 번 할당하면 내부 데이터를 변경할 수 없습니다. 자바에서는 대표적인 예로 String, Integer가 있습니다. 반대개념으로는 Mutable Object(가변 객체)로, 생성 후에도 데이터를 변경할 수 있습니다.배경대부분의 객체지향 언어에서 객체는 참조 형태로 전달하고 받습니다. 객체가 참조를 통해 공유된다면 어떤 장소에서 상태를 변경했을 때 모든 장소에서 영향을 받게됩니다. 이것이 의도한 ..." }, { "title": "[Java] Java에서는 왜 static을 지양해야할까?", "url": "/posts/Language-Static/", "categories": "Language, Java", "tags": "Java", "date": "2023-06-20 08:00:00 +0900", "snippet": "왜 static을 지양해야할까?1. 동시성 문제 발생static 변수는 다른 스레드에서도 접근할 수 있어서 값을 보장하지 않는다. 이를 synchronized를 통해 해결할 수 있다. 현재 데이터를 사용하고 있는 스레드를 제외하고 나머지 스레드들은 데이터에 접근할 수 없도록 막는 개념이다. 하지만 대량의 접속이 생기면서 이러한 처리가 많아지게되면 오히려 성능 저하를 일으킬 수 있다.2. 메모리 관련 문제 발생static 키워드로 선언된 변수는 JVM의 Method area에 할당되어 Garbage collection의 대상이..." }, { "title": "[Java] Java 8 이후 메모리 변화", "url": "/posts/Lauguage-Metaspace/", "categories": "Language, Java", "tags": "Java", "date": "2023-06-15 09:00:00 +0900", "snippet": "Java 8이 나오면서 JVM의 메모리 영역 중에 Permanent Generation 영역이 사라지고 Metaspace 영역이 생겼다.JVM에서의 PermGen(Java 7 이전), Metaspace(Java 8 이후)PermGen과 Metaspace는 JVM Runtime Access Memory 중 Method Area에 해당하는 부분이다.(JVM 벤터마다 다양하게 구현할 수 있지만, 오라클 HotSpot JVM 기준으로 했을 때)필드와 메서드 정보, Runtime Constant Pool, Static 변수, 메서드의 ..." }, { "title": "[CS] IEEE 754", "url": "/posts/CS-IEEE-754/", "categories": "CS", "tags": "CS", "date": "2023-06-13 05:00:00 +0900", "snippet": "실수를 저장할 때 고정소수점 방식과 부동소수점 방식이 있다.고정소수점 정수를 표현하는 비트 수와 소수를 표현하는 비트 수를 미리 정해놓고, 해당 비트만큼만 사용해서 숫자를 표현하는 방식이다. 정수를 표현하는 bit를 늘리면 큰 숫자를 표현할 수 있지만 정밀한 숫자를 표현하기에는 힘들다. 그래서 소수를 표현하는 bit를 늘릴 경우 정밀한 숫자를 표현할 수 있지만 큰 숫자를 표현하지 못한다. 이러한 문제를 해결하기 위해 부동소수점을 사용하고 있다.부동소수점 소수점의 위치를 고정하지 않고, 그 위치를 나타내는 수를 따로 적는..." }, { "title": "[Java] JVM", "url": "/posts/Language-JVM/", "categories": "Language, Java", "tags": "Java", "date": "2023-06-12 05:00:00 +0900", "snippet": "JVM (Java Virtual Machine) 자바 가상 머신, 자바를 실행하기 위한 가상 컴퓨터 자바와 운영체제 사이에서 중개자 역할을 수행하고, 자바가 운영체제에 구애받지 않고 프로그램을 실행할 수 있도록 도와줍니다.특징 속도가 느립니다. 일반 애플리케이션 코드는 OS만 거치고 하드웨어로 전달되는데, Java 애플리케이션은 JVM을 한번 더 거칩니다. 하드웨어에 맞게 완전히 컴파일된 상태가 아니라 실행 시 해석(interpret)됩니다. 요즘은 바이트코드(컴파일된 자바코드)를 하드웨..." }, { "title": "[Java] Generics(제네릭)", "url": "/posts/Language-Generics/", "categories": "Language, Java", "tags": "Java", "date": "2023-06-11 11:00:00 +0900", "snippet": "Generic(제네릭)클래스나 메소드에서 사용할 내부 데이터 타입을 컴파일 시 미리 지정하는 방법이다. 다룰 객체의 타입을 미리 명시해줌으로써, 번거로운 형변환을 줄여준다. 기존에는 다양한 종류의 타입을 다루는 메서드나 매개변수나 리턴타입으로 Object타입의 참조변수를 많이 사용했고, 그로 인해 형변환이 불가피했지만, 이제는 Object 타입 대신 원하는 타입을 지정하기만 하면 된다. 값을 지정할 때 미리 지정한 타입이 아닌 잘못된 타입으로 치환할 경우 컴파일이 안된다. (실행 시 잘못 형변환하..." }, { "title": "[Java] Annotation", "url": "/posts/Annotation/", "categories": "Language, Java", "tags": "Java", "date": "2023-06-08 11:00:00 +0900", "snippet": "어노테이션 Annotation클래스나 메소드 등 선언 시에 @를 사용하는 것 JDK 5부터 등장 언제 사용하는지? 컴파일러에게 정보를 알려주거나 컴파일할 때와 설치 시 작업을 지정하거나 실행할 떄 별도의 처리가 필요할 때 사용가능한 어노테이션 (JDK 6까지 기준)@Override 해당 메소드가 부모 클래스에 있는 메소드를 Override했다는 것을 명시적으로 선언한다. 컴파일할 때 Override한 거니까 잘못 코딩했으면 알려준다. @Deprecated ..." }, { "title": "[Java] Nested 클래스", "url": "/posts/Language-NestedClass/", "categories": "Language, Java", "tags": "Java", "date": "2023-06-07 12:00:00 +0900", "snippet": "Nested 클래스클래스 안의 클래스 별도로 컴파일 할 필요가 없다. (감싸고 있는 클래스를 컴파일하면 자동으로 컴파일되기 때문이다.) 감싸고 있는 클래스에서 내부 클래스의 객체를 생성한 후 내부 클래스의 변수에 접근할 수 있다. (private 변수도) 컴파일한 후 Nested 클래스의 파일 이름 : 감싸고있는클래스명$내부클래스명.classStatic nested 클래스class 내에 class을 선언할 때 static으로 선언될 경우public class OuterOfStatic { static class Static..." }, { "title": "[Review] 2023 11번가 코딩테스트 후기", "url": "/posts/Review-CodingTest/", "categories": "Review, CodingTest", "tags": "Algorithm", "date": "2023-03-20 11:00:00 +0900", "snippet": "11번가 전환형 인턴 중 검색데이터/추천 개발 분야로 지원하였습니다.코딩테스트는 Codility에서 진행되며, 3문제를 110분 내에 풀이하면 됩니다.난이도는 전체적으로 쉬운 편이어서 Codility에서 테스트 한 번씩 해보시고 응시하시면 무난하게 풀이하실 수 있을 것 같습니다.알고리즘은 자바, 파이썬으로 SQL은 MySQL으로 사용가능했습니다.1번 - 구현10분 내로 풀이 가능한 브론즈 정도의 난이도였습니다.2번 - SQLIS NULL, BETWEEN A AND B, CASE WHEN 등 구문을 사용하여 조회해오는 문제였습니..." }, { "title": "[AWS] Database, Message Queue", "url": "/posts/Cloud-AWS-DB-MQ/", "categories": "Cloud, AWS", "tags": "AWS", "date": "2022-12-16 11:00:00 +0900", "snippet": "이 글은 원티드의 ‘‘프리온보딩 백엔드 챌린지 12월 - 백엔드 인프라 설계 w AWS”3번째 강의를 듣고 작성한 글입니다.정확하지 않은 정보가 있다면 댓글 부탁드립니다.AWS 인프라의 전체적인 모습 인프라 관련 요소들 AWS API Gateway, AWS S3, AWS ELB, AWS CloudFront, AWS Secret Manager, 스냅샷 컴퓨팅 파워(서버) AWS EC2, AWS Elastic Beanstalk, AWS ECS, AWS Fargate, AWS Lambda(Serverless..." }, { "title": "[AWS] Computing power(Server)", "url": "/posts/Cloud-AWS-Server/", "categories": "Cloud, AWS", "tags": "AWS", "date": "2022-12-12 11:00:00 +0900", "snippet": "이 글은 원티드의 ‘‘프리온보딩 백엔드 챌린지 12월 - 백엔드 인프라 설계 w AWS”2번째 강의를 듣고 작성한 글입니다.정확하지 않은 정보가 있다면 댓글 부탁드립니다.AWS 인프라의 전체적인 모습 인프라 관련 요소들 AWS API Gateway, AWS S3, AWS ELB, AWS CloudFront, AWS Secret Manager, 스냅샷 컴퓨팅 파워(서버) AWS EC2, AWS Elastic Beanstalk, AWS ECS, AWS Fargate, AWS Lambda(Serverless..." }, { "title": "[AWS] Cloud Computing, AWS 인프라", "url": "/posts/Cloud-AWS/", "categories": "Cloud, AWS", "tags": "AWS", "date": "2022-12-08 11:00:00 +0900", "snippet": "이 글은 원티드의 ‘‘프리온보딩 백엔드 챌린지 12월 - 백엔드 인프라 설계 w AWS” 강의를 듣고 작성한 글입니다.정확하지 않은 정보가 있다면 댓글 부탁드립니다.Cloud Computing인터넷을 통해 데이터를 저장하거나 데이터베이스, 서버, 네트워킹, 소프트웨어와 같은 도구, 애플리케이션 등 다양한 서비스를 제공하는 방식 반대개념 On-premise : 자체적으로 보유한 전산실 서버에 직접 설치해 운영하는 방식장점 손쉽게 서버를 증가시킬 수 있다. 서비스를 안정적으로 운영할 수 있다.AWS 인프라의 전체적인 모습 ..." }, { "title": "[Java] Collections Framework - Map", "url": "/posts/Language-Collections-Map/", "categories": "Language, Java", "tags": "Java", "date": "2022-11-30 11:00:00 +0900", "snippet": "HashMap Map 인터페이스를 구현한다. 키(key)와 값(value)을 하나의 데이터(entry)로 저장한다. 해싱(hashing)을 사용한다. → 많은 양의 데이터를 검색하는데 뛰어난 성능을 보인다. public class HashMap extends AbstractMap implements Map, Cloneable, Serializable { transient Entry[] table; ... static class Entry implements Map.Entry { f..." }, { "title": "[Java] Collections Framework - Set", "url": "/posts/Language-Collections-Set/", "categories": "Language, Java", "tags": "Java", "date": "2022-11-24 11:00:00 +0900", "snippet": "HashSet Set 인터페이스를 구현한다. 저장순서를 유지하지 않고 중복을 허용하지 않는다. 중복을 제거해야하면서 저장순서를 유지해야 한다면 LinkedHashSet을 사용해야 한다. 해싱(hashing)을 사용한다. 해싱 : 해시함수를 이용해서 데이터를 해시테이블에 저장하고 검색하는 기법 (해시함수는 데이터가 저장되어 있는 곳을 알려주기 때문에 다량의 데이터 중에서도 원하는 데이터를 빠르게 찾을 수 있다.) 객체 추가 객체를 추가할 때 이미 저장되어있..." }, { "title": "[Java] Collections Framework - List", "url": "/posts/Language-Collections-list/", "categories": "Language, Java", "tags": "Java", "date": "2022-11-15 11:00:00 +0900", "snippet": "ArrayList List 인터페이스를 구현한다. 데이터의 저장순서가 유지되고 중복을 허용한다. Vector를 개선한 것이고, Vector의 구현원리와 기능적인 측면에서 동일하다. Vector는 기존에 작성된 소스와 호환성을 위해서 남겨두고 있는 것뿐이기 때문에, Vector보다는 ArrayList를 사용할 것 배열을 이용한 자료구조이기 때문에 데이터를 읽어오고 저장하는 데는 효율이 좋지만,용량을 변경해야할 때 새로운 배열을 생성한 후 기존의 배열로부터 복사해와야해서 ..." }, { "title": "[Java] Collections Framework(컬렉션 프레임워크)", "url": "/posts/Language-Collections/", "categories": "Language, Java", "tags": "Java", "date": "2022-11-02 11:00:00 +0900", "snippet": "Collections Framework다수의 데이터를 쉽게 처리할 수 있도록 표준화된 방법을 제공하는 클래스의 집합 즉, 데이터를 저장하는 자료구조와 데이터를 처리하는 알고리즘을 구조화하여 클래스로 구현해 놓은 것입니다.컬렉션 프레임워크 핵심 인터페이스 List와 Set을 구현한 컬렉션 클래스들은 서로 많은 공통부분이 있어서 공통된 부분을 다시 뽑아 Collection 인터페이스를 정의할 수 있었지만,Map인터페이스는 이들과는 전혀 다른 형태로 컬렉션을 다루기 때문에 같은 상속계층도에 포함되지 못했다. ..." }, { "title": "[Java] Wrapper Class(래퍼 클래스)", "url": "/posts/Language-WrapperClass/", "categories": "Language, Java", "tags": "Java", "date": "2022-11-02 11:00:00 +0900", "snippet": "Wrapper Class기본형 값들을 객체로 변환하여 작업을 수행해야 할 때 사용되는 클래스 매개변수로 객체를 요구할 때, 기본형 값이 아닌 객체로 저장해야할 때, 객체 간의 비교가 필요할 때 등등 기본형(primitive type) 변수를 객체로 다룰 수 있게 해준다. 기본형 래퍼클래스 생성자 예 boolean Boolean Boolean(boolean value)Boolean(String s) Boolean b = n..." }, { "title": "[Java] String, StringBuffer, StringBuilder", "url": "/posts/Language-string/", "categories": "Language, Java", "tags": "Java", "date": "2022-10-25 11:00:00 +0900", "snippet": "String자바에서 제공하는 문자열을 위한 클래스이다.인스턴스 생성생성자의 매개변수로 입력받는 문자열을 인스턴스 변수 value에 문자형 배열char[]로 저장한다.public final class String implements java.io.Serializable, Comparable { private char[] value; . . .} 변경 불가능한 클래스(immutable class) 생성된 인스턴스가 갖고 있는 문자열은 읽어올 수만 있고 변경할 수는 없다. + 연산자를 이용해서 문자열을..." }, { "title": "[Algorithm] 코딩테스트 간단 정리", "url": "/posts/CS-Algorithm-codingtest-summary/", "categories": "Computer Science, Algorithm", "tags": "Algorithm", "date": "2022-10-13 11:00:00 +0900", "snippet": "코딩테스트를 앞두고 아주 간단하게 정리하기 위해 작성한 글입니다.코딩테스트 풀이 순서 문제에서 구하는 것을 순서대로 해보기 모든 것을 다해봐야 함. n이 작거나 오래걸리지 않음 → 완전탐색 앞에 것에서 영향을 받음 → DP(순서대로 구하기, 배열로 저장, 반복문 사용/재귀) 모든 것을 다하기에는 너무 많이 해야 함 → 이분탐색(찾아야하는 값을 범위로 두기 left right, 범위를 줄이는 기준 정하기, 반복문 사용) 가장 좋은 기준이 있는 경우 → 그리디(기준으로 정렬) 경로찾기, 백트래킹 → DFS(재귀함수) ..." }, { "title": "[Java] 예외처리", "url": "/posts/Language-exception-handling/", "categories": "Language, Java", "tags": "Java", "date": "2022-10-07 11:00:00 +0900", "snippet": "예외 처리(exception handling)프로그램 오류프로그램이 실행 중 어떤 원인에 의해서 오작동을 하거나 비정상적으로 종료되는 경우가 있는데,이러한 결과를 초래하는 원인을 프로그램 오류/에러 라고한다. 발생 시점에 따라 구분되는 오류 구분 설명 컴파일 에러(compile-time error) 컴파일 할 때 발생하는 에러 런..." }, { "title": "[Java] 내부클래스", "url": "/posts/Language-intterClass/", "categories": "Language, Java", "tags": "Java", "date": "2022-10-06 11:00:00 +0900", "snippet": "내부 클래스(Inner Class)클래스 내에 선언된 클래스이다. 생성 이유 : 두 클래스가 서로 긴밀한 관계에 있기 때문 장점 내부 클래스에서 외부 클래스의 멤버들을 쉽게 접근할 수 있다. 코드의 복잡성을 줄일 수 있다.(캡슐화) class A { // 외부 클래스 (outer class) class B { // 내부 클래스 (inner class) }}내부 클래스 B는 외부 클래스인 A를 제외하고 다른 클래스에서 잘 사용되지 않는 것이어야 한다.종류와 특징 선언위치에 따..." }, { "title": "[Java] 인터페이스", "url": "/posts/Language-interface/", "categories": "Language, Java", "tags": "Java", "date": "2022-09-15 11:00:00 +0900", "snippet": "인터페이스 일종의 추상클래스 추상메서드와 상수만 멤버로 가질 수 있다. (일반 메서드, 멤버변수는 가질 수 없다.) 클래스가 설계도, 추상클래스를 미완성 설계도라고 하면 인터페이스는 기본 설계도라고 할 수 있다.작성interface 인터페이스이름 { public static final 타입 상수이름 = 값; public abstract 메서드이름(매개변수목록);} 모든 멤버변수는 public static final이어야 하며, 이를 생략할 수 있다. 모든 메서드는 public abstract이어야 하며, 이를 생략..." }, { "title": "[Java] 추상화", "url": "/posts/Language-abstract/", "categories": "Language, Java", "tags": "Java", "date": "2022-09-08 11:00:00 +0900", "snippet": "추상화기존 클래스들의 공통적인 부분을 뽑아내서 조상 클래스를 만드는 것이다. 반대되는 개념 구체화 상속을 통해 클래스를 구현, 확장하는 작업이다. 상속계층도를 따라 내려갈수록 구체화의 정도가 심해지며, 올라갈수록 추상화의 정도가 심해진다.추상메서드선언부만 작성하고 구현부는 작성하지 않은 채로 남겨둔 것/* 주석을 통해 어떤 기능을 수행할 목적으로 작성하였는지 설명한다. */abstract 리턴타입 메서드이름; 추상클래스로부터 상속받는 자손클래스는 오버라이딩을 통해 추상클래스의 추상메서드를 모두 ..." }, { "title": "[Java] 다형성(형변환)", "url": "/posts/Language-polymorphism/", "categories": "Language, Java", "tags": "Java", "date": "2022-09-07 11:00:00 +0900", "snippet": "다형성(Polymorphism) 객체지향에서의 다형성이란 여러 가지 형태를 가질 수 있는 능력이다. 자바에서는 한 타입의 참조변수로 여러 타입의 객체를 참조할 수 있도록 하여 다형성을 구현한다. 👉 조상클래스 타입의 참조변수로 자손클래스의 인스턴스를 참조할 수 있도록 하는 것 이 때, 자손클래스의 인스턴스에서 조상클래스의 멤버들만 사용할 수 있다. 자손클래스의 참조변수로 조상클래스의 인스턴스를 참조하면 컴파일 에러가 발생한다. (존재하지 않는 멤버를 사용할 가능성이 있기 때문..." }, { "title": "[Java] 제어자", "url": "/posts/Language-modifier/", "categories": "Language, Java", "tags": "Java", "date": "2022-09-02 11:00:00 +0900", "snippet": "제어자(modifier)클래스, 변수, 메서드의 선언부에 함께 사용되어 부가적인 의미를 부여한다. 접근제어자 : public, protected, default, private 그 외 : static, final, abstract, native, transient, synchronized, volatile, strictfp 하나의 대상에 대해서 여러 제어자를 조합하여 사용하는 것이 가능하다. 접근제어자는 네가지 중 하나만 사용할 수 있다. 제어자 간의 순서는 관계없지만 주로 접근제어자를 제일 왼쪽에 놓는 경향이 있다...." }, { "title": "[Java] package와 import", "url": "/posts/Language-package-import/", "categories": "Language, Java", "tags": "Java", "date": "2022-09-01 11:00:00 +0900", "snippet": "패키지(package)클래스의 묶음 클래스들끼리 그룹 단위로 묶어놓으므로써 클래스를 효율적으로 관리할 수 있다.클래스의 실제 이름(full name)은 패키지명을 포함한 것이다. 같은 이름의 클래스여도 서로 다른 패키지에 존재하는 것이 가능하므로 자신만의 패키지 체계를 유지함으로써 다른 개발자가 개발한 클래스와 이름이 충돌하는 것을 피할 수 있다. 클래스 파일들을 합축한 것이 jar파일(*.jar)이며, jar 파일은 ‘jar.exe’ 외에도 알집이나 winzip으로 압축을 풀 수 있다.규칙 하나의 소스파일에는 ..." }, { "title": "[Java] 상속", "url": "/posts/Language-Inheritance/", "categories": "Language, Java", "tags": "Java", "date": "2022-08-30 11:00:00 +0900", "snippet": "상속 (Inheritance)기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것 보다 적은 양의 코드로 새로운 클래스를 작성할 수 있다. 코드를 공통적으로 관리할 수 있기 때문에 코드의 추가 및 수정이 매우 용이해진다.사용방법extends 사용class Parent {}class Child extends Parent {} Child 클래스에 Parent클래스의 멤버변수와 메서드가 추가된다. 상속받는다는 것은 조상클래스를 확장(extends)한다는 의미로 해석할 수 있다. 초기화블럭은 상속되지 않는다. 접근제어자로..." }, { "title": "[Java] 변수와 메서드", "url": "/posts/Language-Variable-Method/", "categories": "Web Application", "tags": "Java", "date": "2022-08-25 11:00:00 +0900", "snippet": "변수변수의 종류 클래스변수 (class variable) 선언 방법 : 클래스 영역에 선언하고 변수 앞에 static을 붙인다. 사용 방법 : 클래스이름.클래스변수 모든 인스턴스가 공통된 저장공간(변수)을 공유하게 된다. 클래스가 메모리에 로딩될 때 생성되어 프로그램이 종료될 때까지 유지된다. public을 앞에 붙이면 같은 프로그램 내에서 어디서나 접근할 수 있는 전역변수의 성격을 갖는다. 인스턴스변수 (instance variable) 선언 ..." }, { "title": "[Java] 객체", "url": "/posts/Language-Object/", "categories": "Language, Java", "tags": "Java", "date": "2022-08-24 11:00:00 +0900", "snippet": "클래스, 객체, 인스턴스클래스 정의 : 객체를 정의해놓은 것 용도 : 객체를 생성하는 데 사용객체 정의 : 실제로 존재하는 것, 사물 또는 개념 용도 : 객체가 가지고 있는 기능과 속성에 따라 다름인스턴스 인스턴스화(instantiate) : 클래스로부터 객체를 만드는 과정 인스턴스(instance) : 클래스로부터 만들어진 객체객체는 모든 인스턴스를 대표하는 포괄적인 의미를 갖고 있고, 인스턴스는 어떤 클래스로부터 만들어진 것인지 강조하는 의미를 가지고 있습니다. 클래스 –인스턴스화–&amp;gt; 인스턴스(객체..." }, { "title": "[OOP] 객체지향", "url": "/posts/Concept-OOP/", "categories": "Computer Science", "tags": "OOP", "date": "2022-08-18 11:00:00 +0900", "snippet": "객체지향 프로그래밍이란 OOP, Object Oriented Programming의 약자 객체지향 프로그래밍이란 프로그래밍에서 필요한 데이터를 추상화시켜 상태와 행위를 가진 객체를 만들고, 그 객체들 간의 유기적인 상호작용을 통해 로직을 구성하는 프로그래밍 방법입니다.장점과 단점장점 코드를 재사용할 때 용이합니다. 다른 사람이 만든 클래스를 가져와서 사용할 수도 있고, 상속을 통해 확장해서 만들 수도 있습니다. 유지보수가 쉬워집니다. 절차지향 프로그래밍에서는 수정할 부분을 일일이 찾아서 수정해야하지만, 객체지향 프로그래..." }, { "title": "[Web] 웹 동작방식", "url": "/posts/Web-Mechanism/", "categories": "Web Application", "tags": "Web", "date": "2022-07-14 11:00:00 +0900", "snippet": "웹 브라우저에서 URL을 입력했을 때 일어나는 일 웹 브라우저에 URL을 입력하고 Enter 키를 누릅니다. 웹 브라우저가 도메인의 IP주소를 조회합니다.(먼저 캐시를 찾고, 그 다음 DNS를 검색합니다.) 웹 브라우저가 찾은 IP주소를 기반으로 서버와의 TCP 연결을 시작합니다. 웹 브라우저가 HTTP 요청을 서버로 전송합니다.(필요한 경우, HTTPS 보안 통신이 진행됩니다.) 웹 서버가 요청을 처리하고 응답을 다시 웹 브라우저로 전송합니다. 웹 브라우저가 전송 받은 콘텐츠를 렌더링합니다..." }, { "title": "[Swagger] 스웨거 설명, 사용법", "url": "/posts/Web-swagger/", "categories": "Web Application", "tags": "Swagger", "date": "2022-06-21 11:00:00 +0900", "snippet": "Swagger란 REST API 문서를 자동으로 생성해주는 오픈소스 프레임워크다.기능 API 설계 API 개발 API 테스트 API 모킹 및 시각화 API 모니터링 API 관리설정Spring boot에 Swagger 적용 의존성 추가 Gradledependencies { // ... 생략 // swagger2 implementation &#39;io.springfox:springfox-swagger2:2.9.2&#39; implementation &#39;io.springfox:springfox-swagger..." }, { "title": "[Spring] 스프링 PSA 개념", "url": "/posts/Web-spring-psa/", "categories": "Web Application", "tags": "Spring", "date": "2022-06-17 11:00:00 +0900", "snippet": "PSA (Portable Service Abstraction)일관성있는 서비스 추상화 Service Abstraction 어댑터 패턴을 적용해 같은 일을 하는 다수의 기술을 공통의 인터페이스로 제어할 수 있게 한 것 추상화 계층을 사용해서 어떤 기술을 내부에 숨기고 개발자에게 편의성을 제공해주는 것 Portable Service Abstraction 서비스 추상화로 제공되는 기술을 다른 기술 스택으로 간편하게 바꿀 수 있는 확장성을 갖고 있는 것 Spring이 제..." }, { "title": "[Spring] 스프링 AOP 개념, 구현 방법", "url": "/posts/Web-spring-aop/", "categories": "Web Application", "tags": "Spring", "date": "2022-06-16 11:00:00 +0900", "snippet": "AOP (Aspect Oriented Programming)관점 지향 프로그래밍 똑같은 코드가 여러 곳에 흩어져 있을 경우 수정할 때 여러 번 바꿔줘야 한다. 👉 공통적인 코드를 한 곳에 모아놓는다.class A { method a() { AAAA 안녕하세요. BBBB } method b() { AAAA 반갑습니다. BBBB }}class B { method c() { AAAA 안녕히가세요. BBBB }}class A { method a() { 안녕하세요. }..." }, { "title": "[Spring] Bean 등록과 의존성 주입(DI) 사용법", "url": "/posts/Web-spring-di-way/", "categories": "Web Application", "tags": "Spring", "date": "2022-06-14 11:00:00 +0900", "snippet": "빈(Bean) Spring IoC Container가 관리하는 자바 객체 ApplicationContext가 알고있는 객체 (ApplicationContext.getBean()으로 얻어질 수 있는 객체) Bean만 의존성 주입이 된다.Bean 등록 Component Scanning Bean 설정파일에 직접 등록Component Scan원리 스프링에는 @Component 가 붙어있는 모든 클래스를 찾아서 클래스 인스턴스를 만들고 Bean으로 등록하는 Annotation Processor가 있다.스프링부트는 main 메..." }, { "title": "[Spring] 의존성 주입(DI) 개념", "url": "/posts/Web-spring-di-concept/", "categories": "Web Application", "tags": "Spring", "date": "2022-06-09 11:00:00 +0900", "snippet": "의존성 주입(Dependency Injection, DI) 개념의존관계 A 객체가 B 객체를 사용하고 있는 경우👉 B가 변하면 A에 영향을 미친다.👉 A 객체가 B 객체에 의존한다.​의존관계 2가지 경우 일체형A에서 직접 객체를 생성하여 B를 갖는다.class A { private B b; public A() { b = new B(); }}A a = new A();​ 조립형A가 직접 객체를 생성하지 않고 외부에서 생성해서, 생성한 것을 세팅한 후 세팅한 객체를 사용한다.class A { private B ..." }, { "title": "[Spring] JPA와 MyBatis 차이", "url": "/posts/Web-jpa-mapper/", "categories": "Web Application", "tags": "Spring", "date": "2022-05-20 11:00:00 +0900", "snippet": "ORM과 SQL Mapper는 개발자가 직접 JDBC Programming을 하지 않도록 기능을 제공해주는 Persistence Framework이다. 영속성(Persistence) : 데이터들이 프로그램이 종료되어도 사라지지 않고 어떤 곳에 저장되는 개념 자바에서는 데이터의 영속성을 위한 JDBC를 지원해주는데, 이 매핑 작업을 개발자가 일일히 수행해야하는 번거로움이 있다.JPA (Java Persistence API)ORM(Object Relational Mapping) 기술 자바 ORM의 기술 표준 ..." }, { "title": "[Java] DAO, DTO, VO 개념", "url": "/posts/Web-dao-dto-vo/", "categories": "Web Application", "tags": "Java", "date": "2022-05-18 11:00:00 +0900", "snippet": "DAO (Data Access Object) DB의 Data에 접근하기 위한 객체이다. DB에 접근하여 데이터를 삽입, 삭제, 조회 등 조작할 수 있는 기능을 수행한다. MVC패턴의 ‘Model’에서 이와 같은 일을 수행한다. DB 접근을 하기 위한 로직과 비즈니스 로직을 분리하기 위해 사용한다. 사용자는 자신이 필요한 Interface를 DAO에게 던지고, DAO는 이 Interface를 구현한 객체를 사용자에게 편리하게 사용할 수 있도록 반환한다. 데이터베이스와 연결할 Connec..." }, { "title": "[JPA] Querydsl 개념, 사용법", "url": "/posts/Web-querydsl/", "categories": "Web Application", "tags": "Querydsl", "date": "2022-05-13 11:00:00 +0900", "snippet": "Querydsl 개념 JPQL을 코드로 작성할 수 있도록 도와주는 빌더 API JPQL(Java Persistence Query Language) : 테이블이 아닌 엔티티 객체를 대상으로 검색하는 객체지향 쿼리 동작원리 컴파일 단계에서 프로젝트 내의 @Entity 어노테이션을 선언한 클래스를 탐색하고 JPAAnnotationProcessor를 통해 쿼리 타입(QClass)을 생성한다. 쿼리 타입(QClass)들은 Querydsl을 사용하여 메서드 기반으로 쿼리를 작성할 때..." }, { "title": "[Spring] JPA 개념, 사용법", "url": "/posts/Web-jpa/", "categories": "Web Application", "tags": "JPA", "date": "2022-05-11 11:00:00 +0900", "snippet": "JPA 개념 Java Persistence API 의 약자 JAVA에서 제공하는 API이다. RDBMS와 OOP 객체 사이의 불일치에서 오는 패러다임을 해결하기 위해 만들어졌다. ORM(Object-Relational Mapping) 기술이다. 자바 어플리케이션에서 관계형 데이터베이스를 사용하는 방식을 정의한 인터페이스다. JPA를 사용하기 위해서는 JPA를 구현한 ORM 프레임워크를 사용해야 한다. (Hibername, EclipseLink, DataNucleus 등)..." }, { "title": "[Spring] 스프링 MVC 동작 과정", "url": "/posts/web-spring-mvc/", "categories": "Web Application", "tags": "Spring", "date": "2022-05-05 11:00:00 +0900", "snippet": "Spring 동작 과정Spring 동작 순서 및 구조는 개발자의 개발방식에 따라 달라진다.CASE 1 Request -&amp;gt; DispatcherServlet (web.xml) -&amp;gt; HandlerMapping (servelet-context.xml) -&amp;gt; Controller (Controller -&amp;gt; Service -&amp;gt; DAO -&amp;gt; DB -&amp;gt; DAO -&amp;gt; Service -&amp;gt; Controller) -&amp;gt; Dis..." }, { "title": "[Spring] 스프링 입문", "url": "/posts/study-programming-springboot-basic/", "categories": "Web Application", "tags": "Spring", "date": "2022-05-03 11:00:00 +0900", "snippet": "프로젝트 생성스프링 부트로 프로젝트 생성https://start.spring.io/IntelliJ 로 프로젝트 열기open - 프로젝트폴더\\build.gradle프로젝트 구조 src - main : javaresources(java 파일을 제외한 파일들) src - test : 테스트 코드와 관련된 소스들 (테스트 중요) build.gradle repositories { mavenCentral()} dependencies { implementation &#39;org.springfram..." }, { "title": "[Python] 코딩테스트 유형 정리", "url": "/posts/CS-Algorithm-codingtest/", "categories": "Computer Science, Algorithm", "tags": "Python", "date": "2022-04-26 11:00:00 +0900", "snippet": "그리디현재 상황에서 지금 당장 좋은 것만 고르는 방법 기준에 따라 좋은 것을 선택하는 기준을 알려줌 (가장 큰 순서대로, 가장 작은 순서대로 …) 대체로 정렬 알고리즘 사용 시 기준을 만족함 문제 풀이를 위한 최소한의 아이디어를 떠올리고 정당한지 검토구현머릿 속에 있는 알고리즘을 소스코드로 바꾸는 과정 풀이를 떠올리는 것은 쉽지만 소스코드로 옮기기 어려운 문제 (피지컬이 중요함) 완전탐색 : 모든 경우의 수를 주저없이 다 계산하는 해결방법 시뮬레이션 : 문제에서 제시한 알고리즘을 한 단계씩 차례대로 직접 수행 시간..." }, { "title": "[Python] 파이썬 기본 문법 for 코딩테스트", "url": "/posts/Language-python/", "categories": "Language", "tags": "Python", "date": "2022-04-14 11:00:00 +0900", "snippet": "알고리즘 공부를 위해 간단하게 정리하는 파이썬 기본 문법입니다.자료형숫자형 정수형 a = 123a = -123 실수형 a = 1.2 // 소수점 표현 방식a = 4.24e10 // 지수 표현 방식, 대문자 E도 가능 (4.24 * 10^10) 8진수 a = 0o177 // 0o, 0O로 시작 16진수 a = 0x8ff // 0x로 시작 연산자 사칙연산 : +, -, *, / 제곱 : *..." }, { "title": "[JPA] Auditing 기능", "url": "/posts/Web-jpa-auditing/", "categories": "Web Application", "tags": "JPA", "date": "2022-04-13 11:00:00 +0900", "snippet": "Spring Data Jpa - Auditing 기능 엔티티가 저장 또는 수정될 때 자동으로 등록일, 수정일, 등록자, 수정자를 입력 엔티티의 생성과 수정을 감시하고 있는 것 공통 멤버 변수들을 추상 클래스로 만들고, 해당 추상 클래스를 상속받는 형태로 엔티티 리팩토링구현 현재 로그인한 사용자의 정보를 등록자와 수정자로 지정하기 위해서 AuditorAware 인터페이스를 구현한 클래스 생성 public class AuditorAwareImpl implements AuditorAware&amp;lt;Strin..." }, { "title": "[JPA] 영속성 전이, 지연 로딩", "url": "/posts/Web-jpa-cascade/", "categories": "Web Application", "tags": "JPA", "date": "2022-04-12 11:00:00 +0900", "snippet": "영속성 전이 (cascade) 엔티티의 상태를 변경할 때 해당 엔티티와 연관된 엔티티의 상태 변화를 전파시키는 옵션 부모는 One, 자식은 Many 단일 엔티티에 완전히 종속적이고 부모 엔티티와 자식 엔티티의 라이프 사이클이 유사할 때 활용할 것CASCADE 종류 PERSIST : 부모 엔티티가 영속화될 때 자식 엔티티도 영속화 MERGE : 부모 엔티티가 병합될 때 자식 엔티티도 병합 REMOVE : 부모 엔티티가 삭제될 때 자식 엔티티도 삭제 REFRESH : 부모 엔티티가 refresh되면 연관된 자식 엔티티..." }, { "title": "[JPA] 연관 관계 매핑", "url": "/posts/Web-jpa-mapping/", "categories": "Web Application", "tags": "JPA", "date": "2022-04-08 12:00:00 +0900", "snippet": "연관 관계 매핑 연관관계 매핑 종류 일대일(1:1) : @OneToOne 일대다(1:N) : @OneToMany 다대일(N:1) : @ManyToOne 다대다(N:N) : @ManyToMany 방향성 단방향 양방향 일대일 단방향 매핑 @OneToOne @JoinColumn(name = &quot;member_id&quot;) private Member member; ..." }, { "title": "[SpringBoot] 로그인 기능 구현하기(스프링 시큐리티)", "url": "/posts/Web-springboot-login/", "categories": "Web Application", "tags": "SpringBoot", "date": "2022-04-07 12:00:00 +0900", "snippet": "로그인/로그아웃 구현 데이터베이스에서 회원 정보를 가져오는 역할 : UserDetailsService loadUserByUsername() : 회원 정보를 조회하여 사용자의 정보와 권한을 갖는 UserDetails 인터페이스를 반환 회원 정보를 담기 위해서 사용하는 인터페이스 : UserDetails 이 인터페이스를 직접 구현하거나 스프링 시큐리티에서 제공하는 User 클래스 사용 User 클래스는 UserDetails 인터페이스를 구현하고 있는 클래스 ..." }, { "title": "[SQL] 43회 SQLD 합격 후기", "url": "/posts/Review-sqld/", "categories": "Review", "tags": "SQL", "date": "2021-12-24 12:00:00 +0900", "snippet": "응시하게 된 이유업무에서 SQL을 작성할 때마다 헷갈릴 때가 있어서 각잡고 외워볼 겸 응시하게 되었다.준비과정다른 전공자분들은 일주일이면 된다고 했지만 회사다니면서 시간이 어떻게 될지 몰라서삼주 전부터 평일에 한두시간씩 공부했던 것 같다.이론 공부는 검색하면 많이 나오는 SQLD 기본서통합본으로 했고문제풀이는 ‘SQL 자격검정 실전문제’ 책으로 했다. (노랭이책)노랭이책으로 문제풀이하면서 시험에 대한 감이 잡혔다.결과SQL 개념을 정리하는 시간을 가져서 좋았고자격증이라는 눈으로 보이는 결과가 나와서 뿌듯했다." }, { "title": "[Javascript] 자바스크립트 객체, 프로토타입", "url": "/posts/Language-javascript-Object/", "categories": "Language", "tags": "Javascript", "date": "2021-09-15 12:00:00 +0900", "snippet": "기본 문법생성var person = { name: &#39;Soyeon&#39;, age: 24, sayHi: function() { alert(&quot;Hi, I\\&#39;m &quot; + this.name); }}; 객체 : 데이터와 함수의 집합 person 프로퍼티(속성) : 객체 내부의 속성 name, age 메소드 : 객체 내부의 함수 sayHi 객체 리터럴(object literal) : 생성자로 생성하지 않고, 내용을 그대로 대입해서 생성한 객체접근 &amp;amp; 설..." }, { "title": "[Javascript] 자바스크립트 기본 요약", "url": "/posts/Language-javascript-Summary/", "categories": "Language", "tags": "Javascript", "date": "2021-09-02 12:00:00 +0900", "snippet": "(계속 UPDATE 예정)변수var hometown = &quot;Inchoen&quot;;let age;const MY_NAME = &quot;soyeon&quot;;function sayHello() { hello = &quot;javascript&quot;;} 변수에 초기화되기 전의 값 : undefined var : function scope, hoisting (유효범위를 최상단으로 끌어올림-선언 전에 사용 가능) let : block scope, hoisting 안됨 const : 상수, block sco..." }, { "title": "[Javascript] 자바스크립트 정수/실수 체크하기 (+소수점 몇자리 이하인지 체크하기)", "url": "/posts/Language-javascript-IntegerOrDecimal/", "categories": "Language", "tags": "Javascript", "date": "2021-09-01 12:00:00 +0900", "snippet": "정수/실수 체크하기산술 연산자 %100 % 1; // 0100 % 1 === 0; // true100.1 % 1 === 0; // false자바스크립트에서는 % 연산자를 사용하면 나머지를 반환한다.정수인 값을 % 1를 했을 때 무조건 0이 나오는 점을 이용해서 정수인지 실수인지 판단한다.Number.isInteger() 메소드Number.isInteger(100); // trueNumber.isInteger(100.1); // false 구문 : Number.isInteger(value) 반환..." } ]
